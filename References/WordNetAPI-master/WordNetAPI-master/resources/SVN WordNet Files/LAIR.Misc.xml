<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LAIR.Misc</name>
    </assembly>
    <members>
        <member name="T:LAIR.Misc.GetValue">
            <summary>
            Form for getting a value from the user
            </summary>
        </member>
        <member name="M:LAIR.Misc.GetValue.Show(System.String,System.String,System.Boolean)">
            <summary>
            Shows a dialog and returns the value
            </summary>
            <param name="title">Title for dialog</param>
            <param name="defaultText">Default text to display in value field</param>
            <param name="passwordField">Whether or not the textbox should be a password field</param>
            <returns>Value</returns>
        </member>
        <member name="M:LAIR.Misc.GetValue.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="windowTitle">Title of window</param>
            <param name="defaultText">Default to text to show in value field</param>
        </member>
        <member name="F:LAIR.Misc.GetValue.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LAIR.Misc.GetValue.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LAIR.Misc.GetValue.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:LAIR.Misc.GetValue.Value">
            <summary>
            Gets the value entered by the user
            </summary>
        </member>
        <member name="T:LAIR.Misc.HPCC">
            <summary>
            Provides functionality for interacting with MSU's HPCC
            </summary>
        </member>
        <member name="M:LAIR.Misc.HPCC.CreateJobScripts(System.String,System.String,LAIR.Collections.Generic.Set{System.String},System.String,LAIR.Misc.HPCC.ScriptCompleter)">
            <summary>
            Creates HPCC job scripts for input files in a given directory
            </summary>
            <param name="directory">Directory to look for files in</param>
            <param name="filePattern">File pattern to match</param>
            <param name="excludeExtensions">File extensions to exclude (include . in extensions), or null for no exclusion</param>
            <param name="stubScriptPath">Stub script path, which will be completed for each input file</param>
            <param name="scriptCompleter">Script completion function</param>
        </member>
        <member name="M:LAIR.Misc.HPCC.ConvertFeatureTransformForSelection(System.String)">
            <summary>
            Converts a feature name transform into a mapping from feature numbers to groups
            </summary>
            <param name="path">Path to transform</param>
        </member>
        <member name="T:LAIR.Misc.HPCC.ScriptCompleter">
            <summary>
            Delegate for functions that complete HPCC job scripts
            </summary>
            <param name="filePath">Path to file that is to be processed</param>
            <returns>Completion of job script</returns>
        </member>
        <member name="T:LAIR.Misc.IUpdatesStatus">
            <summary>
            Interface for classes that update their status
            </summary>
        </member>
        <member name="E:LAIR.Misc.IUpdatesStatus.OnUpdateStatus">
            <summary>
            Fired when status is updated
            </summary>
        </member>
        <member name="T:LAIR.Misc.UpdateStatusArg">
            <summary>
            Update status argument class
            </summary>
        </member>
        <member name="M:LAIR.Misc.UpdateStatusArg.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="newStatus">New status</param>
        </member>
        <member name="P:LAIR.Misc.UpdateStatusArg.NewStatus">
            <summary>
            Gets the new status
            </summary>
        </member>
        <member name="T:LAIR.Misc.LanguageModel">
            <summary>
            Provides language modeling functionality
            </summary>
        </member>
        <member name="M:LAIR.Misc.LanguageModel.#ctor(System.String,System.Int32,LAIR.Misc.StopWordHandler,LAIR.Morphology.Stemmer)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text to compute language model for</param>
            <param name="n">Size of n-grams</param>
            <param name="stopWordHandler">Stop word handler to apply, or null for no stop word processing</param>
            <param name="stemmer">Stemmer to apply</param>
        </member>
        <member name="M:LAIR.Misc.LanguageModel.ComputeLanguageModel(System.Int32)">
            <summary>
            Computes an n-gram language model
            </summary>
            <param name="n">Size of n-grams</param>
        </member>
        <member name="M:LAIR.Misc.LanguageModel.Sample(System.Int32)">
            <summary>
            Gets a random sample of n-grams from this language model according to the observed distribution
            </summary>
            <param name="numberOfNGrams">Number of n-grams to get</param>
            <returns>Sequence of n-grams</returns>
        </member>
        <member name="P:LAIR.Misc.LanguageModel.NGrams">
            <summary>
            Gets the n-grams in this model
            </summary>
        </member>
        <member name="T:LAIR.Misc.ChartCell">
            <summary>
            ChartCell class
            </summary>
        </member>
        <member name="T:LAIR.Misc.MinEdit">
            <summary>
            Min edit class
            </summary>
        </member>
        <member name="M:LAIR.Misc.MinEdit.EditDistance(System.String,System.String,System.Boolean)">
            <summary>
            Gets edit distance between two strings
            </summary>
            <param name="s1">First string</param>
            <param name="s2">Second string</param>
            <param name="caseSensitive">Perform in case-sensitive manner</param>
            <returns>Minimum edit distance between two strings</returns>
        </member>
        <member name="T:LAIR.Misc.PrefixTreeNode">
            <summary>
            Represents the prefix tree (trie) data structure
            </summary>
        </member>
        <member name="M:LAIR.Misc.PrefixTreeNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.Misc.PrefixTreeNode.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="s">String to initialize this tree with</param>
        </member>
        <member name="M:LAIR.Misc.PrefixTreeNode.Add(System.String)">
            <summary>
            Adds a string to the current tree
            </summary>
            <param name="s">String to add</param>
        </member>
        <member name="T:LAIR.Misc.StopWordHandler">
            <summary>
            Removes stop words
            </summary>
        </member>
        <member name="M:LAIR.Misc.StopWordHandler.#ctor">
            <summary>
            Constructs a stop word handler using the default stop word list, which is fairly aggressive.
            </summary>
        </member>
        <member name="M:LAIR.Misc.StopWordHandler.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="stopWords">List of stop words to use</param>
        </member>
        <member name="M:LAIR.Misc.StopWordHandler.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to stop word list (one word per line)</param>
        </member>
        <member name="M:LAIR.Misc.StopWordHandler.IsStopWord(System.String)">
            <summary>
            Check if a word is a stop word
            </summary>
            <param name="word">Word to check</param>
            <returns>True if word is a stop word, false otherwise</returns>
        </member>
        <member name="M:LAIR.Misc.StopWordHandler.RemoveStopWords(System.Collections.Generic.List{System.String})">
            <summary>
            Removes stop words from a list of words
            </summary>
            <param name="words">Words to check</param>
        </member>
        <member name="T:LAIR.Misc.EventDelegates">
            <summary>
            Miscellaneous event delegates
            </summary>
        </member>
        <member name="T:LAIR.Misc.EventDelegates.ProgressUpdateDelegate">
            <summary>
            Represents a method called to give updates on processing progress
            </summary>
            <param name="percentDone"></param>
        </member>
        <member name="T:LAIR.Misc.EventDelegates.ProcessingDoneDelegate">
            <summary>
            Represents a method called to notify of processing completion
            </summary>
        </member>
        <member name="T:LAIR.Misc.EventDelegates.GenericDelegate">
            <summary>
            Generic, void-return, no-parameter delegate
            </summary>
        </member>
        <member name="T:LAIR.Misc.ImageViewer">
            <summary>
            ImageViewer form
            </summary>
        </member>
        <member name="M:LAIR.Misc.ImageViewer.#ctor(System.Collections.Generic.List{LAIR.Misc.TitledImage})">
            <summary>
            Constructor
            </summary>
            <param name="images">List of images to view</param>
        </member>
        <member name="M:LAIR.Misc.ImageViewer.#ctor(System.Collections.Generic.List{LAIR.Misc.TitledImage},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="images">List of images to view</param>
            <param name="startImage">Zero-based index of image to start on</param>
        </member>
        <member name="M:LAIR.Misc.ImageViewer.OnImageChange(System.Object,LAIR.Misc.ImageChangedEventArgs)">
            <summary>
            Fires OnImageChange event
            </summary>
            <param name="o"></param>
            <param name="icea"></param>
        </member>
        <member name="F:LAIR.Misc.ImageViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LAIR.Misc.ImageViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LAIR.Misc.ImageViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:LAIR.Misc.ImageViewer.ImageChanged">
            <summary>
            Fired when images changes
            </summary>
        </member>
        <member name="T:LAIR.Misc.ImageViewer.ImageChangedHandler">
            <summary>
            Handles the event in which the image that is being displayed is changed
            </summary>
            <param name="o"></param>
            <param name="icea"></param>
        </member>
        <member name="T:LAIR.Misc.ImageChangedEventArgs">
            <summary>
            The event arguments for the ImageChanged event
            </summary>
        </member>
        <member name="F:LAIR.Misc.ImageChangedEventArgs.title">
            <summary>
            Title of image
            </summary>
        </member>
        <member name="M:LAIR.Misc.ImageChangedEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Title"></param>
        </member>
        <member name="T:LAIR.Misc.InteractivePictureBox">
            <summary>
            InteractivePictureBox class
            </summary>
        </member>
        <member name="M:LAIR.Misc.InteractivePictureBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LAIR.Misc.InteractivePictureBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LAIR.Misc.InteractivePictureBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LAIR.Misc.InteractivePictureBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:LAIR.Misc.InteractivePictureBox.Image">
            <summary>
            Gets or sets the image to display
            </summary>
        </member>
        <member name="T:LAIR.Misc.TidyHTML">
            <summary>
            Provides access to the Tidy HTML program
            </summary>
        </member>
        <member name="M:LAIR.Misc.TidyHTML.Run(System.String,System.String)">
            <summary>
            Runs Tidy HTML on some input
            </summary>
            <param name="tidyExePath">Path to executable</param>
            <param name="input">Input text</param>
            <returns>Tidy HTML output</returns>
        </member>
        <member name="T:LAIR.Misc.TitledImage">
            <summary>
            Encapsulates an image and a title
            </summary>
        </member>
        <member name="M:LAIR.Misc.TitledImage.#ctor(System.Drawing.Image,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="image"></param>
            <param name="title"></param>
        </member>
        <member name="P:LAIR.Misc.TitledImage.Title">
            <summary>
            Gets or sets the title on this titled image
            </summary>
        </member>
        <member name="P:LAIR.Misc.TitledImage.Image">
            <summary>
            Gets or sets the image for this titled image
            </summary>
        </member>
        <member name="T:LAIR.Misc.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.ClosedHand">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.OpenHand">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.stopwords">
             <summary>
               Looks up a localized string similar to a
            abaft
            aboard
            about
            above
            according
            across
            afore
            aforesaid
            after
            afterwards
            again
            against
            agin
            ago
            aint
            albeit
            all
            almost
            alone
            along
            alongside
            already
            also
            although
            always
            am
            amid
            amidst
            among
            amongst
            an
            and
            anent
            another
            any
            anybody
            anyhow
            anyone
            anything
            anyway
            anywhere
            apart
            are
            aren&apos;t
            around
            as
            aslant
            astride
            at
            athwart
            av
            away
            b
            back
            bar
            barring
            be
            became
            because
            become
            becomes
            becoming
            been
            before
            beforehand
            behind
            being
            below
            beneath
            beside
            besides
            best
            better
            between
            betwixt
            beyond
            both
            but
            by
            c
            c [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:LAIR.Misc.Properties.Resources.up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:LAIR.Misc.TreeBankNodeExtensions">
            <summary>
            Provides extension methods for TreeBank nodes
            </summary>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentIndex(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets the argument index for a node. Node can only have a single index associated with it. An 
            exception will be thrown if it has multiple indexes.
            </summary>
            <param name="n">Node to get argument index for. Must be a NomBankNode or a PropBankNode</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank argument indexes to PropBank indexes when
            possible</param>
            <returns>Argument index</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentIndexes(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets the argument indexes for a node. Node can have multiple indexes, as opposed to GetArgumentIndex. Of course,
            calling this on PropBank nodes will only ever return a single index.
            </summary>
            <param name="n">Node to get argument indexes for. Must be a NomBankNode or a PropBankNode.</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank argument indexes to PropBank indexes when
            possible</param>
            <returns>Argument indexes</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentIndexes(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean,LAIR.Collections.Generic.Set{System.Int32}@)">
            <summary>
            Gets the argument indexes for a node. Node can have multiple indexes, as opposed to GetArgumentIndex. Of course,
            calling this on PropBank nodes will only ever return a single index.
            </summary>
            <param name="n">Node to get argument indexes for. Must be a NomBankNode or a PropBankNode.</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank argument indexes to PropBank indexes when
            possible</param>
            <param name="originalIndexes">Original argument indexes, before they were converted to PropBank indexes. If
            nomBankToPropBank is false, this must be null. If nomBankToPropBank is true, this may be either null or non-null. In 
            the latter case, argument indexes will be added to the passed set using Set.Add. This set will also contain any PropBank
            argument indexes.</param>
            <returns>Argument indexes</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetPredicateNode(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets the predicate node for a given predicate tree
            </summary>
            <param name="n">Predicate tree - must be either a NomBankNode or a PropBankNode</param>
            <param name="allowPhrasalPredicates">Whether or not to allow phrasal predicates. If true and a phrasal predicate is 
            encountered, the first token of the phrasal predicate will be returned.</param>
            <returns>Predicate node</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetBasePredicate(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets base predicate for a predicate tree (i.e., the predicate contained in Information.Noun or Information.Verb). Only
            valid for root nodes.
            </summary>
            <param name="n">Predicate tree for which to get base predicate (must be root)</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank predicates to PropBank predicates where possible</param>
            <returns>Base predicate</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetBasePredicate(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean,System.Boolean@)">
            <summary>
            Gets base predicate for a predicate tree (i.e., the predicate contained in Information.Noun or Information.Verb). Only
            valid for root nodes.
            </summary>
            <param name="n">Predicate tree for which to get base predicate (must be root)</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank predicates to PropBank predicates where possible</param>
            <param name="predicateIsVerb">Whether or not the returned predicate is a verb or a noun converted to a verb</param>
            <returns>Base predicate</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetBasePredicate(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean,System.Boolean@,System.String@,System.Boolean@)">
            <summary>
            Gets base predicate for a predicate tree (i.e., the predicate contained in Information.Noun or Information.Verb). Only
            valid for root nodes.
            </summary>
            <param name="n">Predicate tree for which to get base predicate (must be root)</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank predicates to PropBank predicates where possible</param>
            <param name="predicateIsVerb">Whether or not the returned predicate is a verb or a noun converted to a verb</param>
            <param name="originalPredicate">Original predicate, before any NomBank-PropBank conversion</param>
            <param name="originalPredicateIsVerb">Whether or not the original predicate is a verb</param>
            <returns>Base predicate</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentNodes(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets argument nodes for a predicate tree. Only valid for root nodes of PropBank and NomBank trees.
            </summary>
            <param name="n">Predicate tree to get arguments for - must be a NomBankNode or PropBankNode</param>
            <param name="includeNullElements">Whether or not to include null-element argument nodes</param>
            <param name="includeSplitArguments">Whether or not to include split arguments</param>
            <param name="headSplitArgumentNodesOnly">If including split nodes, this specifies whether or not to only include the head node
            of the split argument. The head node is defined as the node containing the semantic head of the LCA of all nodes
            in the split argument.</param>
            <param name="includeSingleNodeArguments">Whether or not to include single nodes</param>
            <param name="excludeSingleNodeArgumentsWhenMultiple">Whether or not to exclude single nodes if there are more than one</param>
            <returns>Set of argument nodes</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentNodeCollections(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets the argument node collections for a TreeBankNode, which must be a NomBank or PropBank node.
            </summary>
            <param name="n">Node to get collections for</param>
            <param name="removeNullElements">Whether or not to remove null element nodes from the collections. This does not change the
            underlying PropBank or NomBank tree - null elements will still remain in these trees.</param>
            <returns>Node collections</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetModifierNodes(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets modifier nodes for a predicate tree. Only valid for root nodes of PropBank and NomBank trees.
            </summary>
            <param name="n">Predicate tree to get modifiers for - must be a NomBankNode or PropBankNode</param>
            <param name="includeNullElements">Whether or not to include null-element modifier nodes</param>
            <param name="includeSplitModifiers">Whether or not to include split modifiers</param>
            <param name="headSplitModifierNodesOnly">If including split nodes, this specifies whether or not to only include the head node
            of the split modifier. The head node is defined as the node containing the semantic head of the LCA of all nodes
            in the split modifier.</param>
            <param name="includeSingleNodeModifiers">Whether or not to include single nodes</param>
            <param name="excludeSingleNodeModifiersWhenMultiple">Whether or not to exclude single nodes if there are more than one</param>
            <returns>Set of modifier nodes</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.TryGetRoleInformation(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Int32,System.String@)">
            <summary>
            Tries to get information for a role in a predicate tree
            </summary>
            <param name="predicateTree">Predicate tree to get information</param>
            <param name="argumentIndex">Argument index to get information for</param>
            <param name="description">Role description for the passed argument</param>
            <returns>True if the role denoted by argumentIndex was found</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.TryGetRoleInformation(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Int32,System.String@,System.Int32@)">
            <summary>
            Tries to get information for a role in a predicate tree
            </summary>
            <param name="predicateTree">Predicate tree to get information</param>
            <param name="argumentIndex">Argument index to get information for</param>
            <param name="description">Role description for the passed argument</param>
            <param name="sourceIndex">Source index for argument index</param>
            <returns>True if the role denoted by argumentIndex was found</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetRoleSetID(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets the role set for a TreeBankNode
            </summary>
            <param name="n">Node (must be root)</param>
            <param name="nomBankToPropBank">Whether or not to convert NomBank role set IDs to PropBank role set IDs where possible</param>
            <returns>Role set</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetUnfilledRoles(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode,System.Boolean)">
            <summary>
            Gets unfilled roles for a PropBank or NomBank predicate tree
            </summary>
            <param name="predicateTree">Predicate tree to get unfilled roles for (must be PropBank or NomBank node)</param>
            <param name="considerNullElementNodes">Whether or not to consider null-element nodes when checking whether a role is filled</param>
            <returns>Unfilled roles</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetArgumentConfidence(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankNode)">
            <summary>
            Gets confidence of an argument node. Node must be either PropBankNode or NomBankNode, and must be an argument node.
            </summary>
            <param name="n">Node to get argument confidence for. Must be either PropBankNode or NomBankNode, and must be an argument node.</param>
            <returns>Confidence of argument label</returns>
        </member>
        <member name="M:LAIR.Misc.TreeBankNodeExtensions.GetWordNetPOS(LAIR.ResourceAPIs.PennBank.TreeBank.TreeBankEngine.SyntacticCategory)">
            <summary>
            Gets the WordNet POS for a TreeBank syntactic category
            </summary>
            <param name="c">TreeBank syntactic category to get WordNet POS for</param>
            <returns>WordNet POS</returns>
        </member>
    </members>
</doc>